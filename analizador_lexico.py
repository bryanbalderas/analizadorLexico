import re

texto=[]

with open('C:/Users/bryan/Desktop/testCom.txt','r') as archivo:
    for linea in archivo:
        texto.extend(linea.split())
        

columnas=['[0-9]','$','e','.','~','[a-zA-Z]','{','@','}',':','=',';','!','[',']','(',')','/','+',' \ ','-','_','>','<','*']


def obtenerColumna(car):
    letras=re.compile(columnas[5])
    digitos=re.compile(columnas[0])
    
    if letras.search(car):
        return 5
    
    if digitos.search(car):
        return 0
    
    for c in columnas:
        if car in c:
            if c=='[0-9]' or c=='[a-zA-Z]':
                continue
            else:
                return columnas.index(c)
            
        
    return -1
    

matriz=[[206,9,206,206,1,206,11,206,13,15,23,110,17,112,113,114,115,18,125,206,124,206,24,25,126],
        [2,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [2,200,3,5,100,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [4,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [4,101,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [6,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [6,200,7,200,102,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [8,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [8,200,200,200,103,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
        [206,206,206,206,206,10,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206],
        [10,104,104,104,104,10,104,104,104,104,104,104,104,104,104,104,104,104,104,104,10,10,104,104,104],
        [201,201,201,201,201,201,201,12,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201],
        [201,201,201,201,201,201,105,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201],
        [202,202,202,202,202,202,202,14,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202],
        [202,202,202,202,202,202,202,202,106,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202],
        [107,107,107,107,107,107,107,107,107,108,16,107,107,107,107,107,107,107,107,107,107,107,107,107,107],
        [203,203,203,203,203,203,203,203,203,203,109,203,203,203,203,203,203,203,203,203,203,203,203,203,203],
        [206,206,206,206,206,206,206,206,206,206,206,206,111,206,206,206,206,206,206,206,206,206,206,206,206],
        [116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,19,116,21,116,116,116,116],
        [204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,20,204,204,204,204,204,204],
        [204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,117,204,204,204,204,204],
        [204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,22,204,204,204,204],
        [204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,118,204,204,204,204,204],
        [205,205,205,205,205,205,205,205,205,205,119,205,205,205,205,205,205,205,205,205,205,205,205,205,205],
        [205,205,205,205,205,205,205,205,205,205,121,205,205,205,205,205,205,205,205,205,205,205,120,205,205],
        [205,205,205,205,205,205,205,205,205,205,123,205,205,205,205,205,205,205,205,205,205,205,205,122,205]]
        

resultados={
    '100':'~digito+~',
    '101':'~digito+edigito+~',
    '102':'~digito+.digito+~',
    '103':'~digito+.digito+edigito+~',
    '104':'$letra(letra|digito|_|-)*',
    '105':'{@{',
    '106':'}@}',
    '107':':',
    '108':'::',
    '109':':==',
    '110':';',
    '111':'!!',
    '112':'[',
    '113':']',
    '114':'(',
    '115':')',
    '116':'/',
    '117':'/++\ ',
    '118':'/--\ ',
    '119':'==',
    '120':'>>',
    '121':'>=',
    '122':'<<',
    '123':'<=',
    '124':'-',
    '125':'+',
    '126':'*',
    '200':'!=digito | e | .',
    '201':'!=@ | {',
    '202':'!= @|}',
    '203':'!==',
    '204':'!= \|+|-',
    '205':'!=  >|<|=',
    '206':'Error'
}

palabras_reservadas={
    'vars':'Palabra Reservada vars',
    'number':'Palabra reservada number',
    'dec':'Palabra Reservada dec',
    'character':'Palabra reservada character',
    'logic':'Palabra Reservada logic',
    'list':'Palabra reservada list',
    'start':'Palabra Reservada start',
    'end':'Palabra reservada end',
    'in':'Palabra Reservada in',
    'inicio':'Palabra reservada inicio',
    'hacer':'Palabra Reservada hacer',
    'hasta':'Palabra reservada hasta',
    'while':'Palabra reservada while',
    'consecutive':'Palabra Reservada consecutive',
    'repeat':'Palabra reservada repeat',
    'cases':'Palabra Reservada cases',
    'writeln':'Palabra reservada writeln',
    'readln':'Palabra Reservada readln',
    'break':'Palabra reservada break',
    'case':'Palabra reservada case',
    'until':'Palabra Reservada until',
    'verdadero':'Palabra reservada verdadero',
    'falso':'Palabra reservada falso',
    'and':'Palabra reservada and',
    'or':'Palabra reservada or',
}


i=0

estado=0
columna=0

tokens=[]

for linea in texto:
    while(i<len(linea)):
        caracter=linea[i]
        i=i+1
    
        columna=obtenerColumna(caracter)
        
        if columna==-1:
            print('error')
            break
        
        fila=matriz[[estado][0]]
        
        estado=fila[columna]
        print(estado)
        print(matriz[[estado][0]])
        
    i=0
    columna=0
    

    